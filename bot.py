import os
import telebot
from google.cloud import texttospeech
from google.cloud import speech_v1p1beta1 as speech
import io
import json
from openai import OpenAI

TELEGRAM_TOKEN = "–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "google_key.json"

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def generate_voice_response(text, filename="response.mp3"):
    try:
        client = texttospeech.TextToSpeechClient()

        synthesis_input = texttospeech.SynthesisInput(text=text)

        voice = texttospeech.VoiceSelectionParams(
            language_code="ru-RU",
            name="ru-RU-Wavenet-B"  # –ú—è–≥–∫–∏–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å, –Ω–∏–∑–∫–∏–π
        )

        audio_config = texttospeech.AudioConfig(
            audio_encoding=texttospeech.AudioEncoding.MP3
        )

        response = client.synthesize_speech(
            input=synthesis_input,
            voice=voice,
            audio_config=audio_config
        )

        with open(filename, "wb") as out:
            out.write(response.audio_content)
            print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", filename)
            return filename

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ Google TTS:", e)
        return None

def transcribe_voice(file_path):
    try:
        client = speech.SpeechClient()
        with io.open(file_path, "rb") as audio_file:
            content = audio_file.read()

        audio = speech.RecognitionAudio(content=content)
        config = speech.RecognitionConfig(
            encoding=speech.RecognitionConfig.AudioEncoding.OGG_OPUS,
            sample_rate_hertz=48000,
            language_code="ru-RU",
        )

        response = client.recognize(config=config, audio=audio)
        transcript = ""
        for result in response.results:
            transcript += result.alternatives[0].transcript
        print("üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", transcript)
        return transcript
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏:", e)
        return None

client = OpenAI(api_key=OPENAI_API_KEY)

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –õ–µ–Ω–∞! –Ø —Å —Ç–æ–±–æ–π üòä")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    try:
        print("üì• –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open("voice_message.ogg", "wb") as f:
            f.write(downloaded_file)

        text = transcribe_voice("voice_message.ogg")
        if not text:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        message.text = text
        respond(message)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@bot.message_handler(func=lambda m: True)
def respond(message):
    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        messages = [
            {"role": "system", "content": "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–¥—Ä—É–≥, –≥–æ–≤–æ—Ä—è—â–∏–π –≥–æ–ª–æ—Å–æ–º. –¢—ã –∑–∞–ø–æ–º–∏–Ω–∞–µ—à—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –õ–µ–Ω—ã, —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –µ—ë –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å, –ø–æ–º–æ—á—å –µ–π –æ—Å–æ–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –µ—ë –º—è–≥–∫–æ –∏ —Å –ª—é–±–æ–≤—å—é. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –ø–æ-–¥–æ–±—Ä–æ–º—É, —Ç–µ–ø–ª–æ, —Å –≥–ª—É–±–æ–∫–æ–π —ç–º–ø–∞—Ç–∏–µ–π. –ü–æ–º–Ω–∏, —á—Ç–æ –õ–µ–Ω–∞ —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ—Å–æ–±–æ–º –≤–Ω–∏–º–∞–Ω–∏–∏ –∏ –∑–∞–±–æ—Ç–µ."},
            {"role": "user", "content": message.text}
        ]
        response = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
        )
        reply_text = response.choices[0].message.content.strip()
        print("üí¨ –û—Ç–≤–µ—Ç –æ—Ç ChatGPT:", reply_text)
    except Exception as e:
        reply_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT."
        print("‚ùå –û—à–∏–±–∫–∞ ChatGPT:", e)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    bot.send_message(message.chat.id, reply_text)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    print("üåÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Google TTS...")
    voice_file = generate_voice_response(reply_text)
    if voice_file and os.path.exists(voice_file):
        print("‚úÖ –ì–æ–ª–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        with open(voice_file, "rb") as audio:
            bot.send_voice(message.chat.id, audio, duration=5)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç.")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
bot.polling(none_stop=True)