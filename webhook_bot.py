import os
import traceback
import json
from dotenv import load_dotenv
from google.cloud import texttospeech
import telebot
from pydub import AudioSegment
import speech_recognition as sr
import openai
import requests
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ —è–∑—ã–∫–∞ ===
user_histories = {}
user_languages = {}

client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

HISTORY_FILE = "user_histories.json"

def load_histories():
    global user_histories
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            user_histories = json.load(f)

def save_histories():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(user_histories, f, ensure_ascii=False, indent=2)

def text_to_speech(text, filename="response.mp3", lang="ru-RU", voice_name="ru-RU-Wavenet-D"):
    client = texttospeech.TextToSpeechClient()
    synthesis_input = texttospeech.SynthesisInput(text=text)
    voice = texttospeech.VoiceSelectionParams(
        language_code=lang,
        name=voice_name
    )
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3
    )
    response = client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config
    )
    with open(filename, "wb") as out:
        out.write(response.audio_content)
    return filename

def generate_gpt_reply(user_id, prompt):
    if user_id not in user_histories:
        user_histories[user_id] = [{
            "role": "system",
            "content": (
                "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫. "
                "–¢—ã –º—è–≥–∫–æ –∏ —Å —Ç–µ–ø–ª–æ—Ç–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. "
                "–¢—ã —É–º–µ–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —á—É–≤—Å—Ç–≤–∞—Ö, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–∏, –∞—Ä—Ö–µ—Ç–∏–ø–∞—Ö, –º–µ—Ç–∞—Ñ–æ—Ä–∞—Ö, –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ, —Å–∏–º–≤–æ–ª–∞—Ö, —Å–Ω–∞—Ö –∏ —Ç–æ–Ω–∫–∏—Ö —ç–Ω–µ—Ä–≥–∏—è—Ö. "
                "–¢—ã —Å–æ—á–µ—Ç–∞–µ—à—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫—É, –∫–∞–∫ –º—É–¥—Ä—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫, –∏ –ø–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–π –ø—É—Ç—å."
            )
        }]
        name_prompt = (
            "–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ–Ω–∞', "
            "–∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ –∏–º—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. "
            "–¢–∞–∫–∂–µ, –µ—Å–ª–∏ –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ '—Ç—ã', –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ –∏ –¥–µ–ª–∞–π —Ç–∞–∫. "
            "–ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ, —Å —Ç–µ–ø–ª–æ–º –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º."
        )
        user_histories[user_id].append({
            "role": "system",
            "content": name_prompt
        })
    user_histories[user_id].append({"role": "user", "content": prompt})

    chat_completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=user_histories[user_id]
    )
    reply = chat_completion.choices[0].message.content.strip()
    user_histories[user_id].append({"role": "assistant", "content": reply})
    save_histories()
    return reply

tarot_cards = {
    "–®—É—Ç": "–ù–∞—á–∞–ª–æ –ø—É—Ç–∏, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, –Ω–∞–∏–≤–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞ –¥—É—Ö–∞.",
    "–ú–∞–≥": "–°–∏–ª–∞ –≤–æ–ª–∏, –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ü–∏—è, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è.",
    "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞": "–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å.",
    "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": "–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∑–∞–±–æ—Ç–∞, –∏–∑–æ–±–∏–ª–∏–µ, –∂–µ–Ω—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è.",
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø–æ—Ä—è–¥–æ–∫, –≤–ª–∞—Å—Ç—å, –∑–∞—â–∏—Ç–∞.",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç": "–î—É—Ö–æ–≤–Ω—ã–µ —É—á–µ–Ω–∏—è, —Ç—Ä–∞–¥–∏—Ü–∏–∏, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –º—É–¥—Ä–æ—Å—Ç—å.",
    "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ": "–í—ã–±–æ—Ä, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–æ—é–∑, –≥–∞—Ä–º–æ–Ω–∏—è.",
    "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞": "–†–µ—à–∏–º–æ—Å—Ç—å, –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥, –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Ç—É–∞—Ü–∏–µ–π.",
    "–°–∏–ª–∞": "–ú—è–≥–∫–æ—Å—Ç—å, —Å–º–µ–ª–æ—Å—Ç—å, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º–æ—â—å, —Ç–µ—Ä–ø–µ–Ω–∏–µ.",
    "–û—Ç—à–µ–ª—å–Ω–∏–∫": "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, –ø–æ–∏—Å–∫ –∏—Å—Ç–∏–Ω—ã, —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–±–æ—Ç–∞.",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã": "–°—É–¥—å–±–∞, –ø–æ–≤–æ—Ä–æ—Ç —Å–æ–±—ã—Ç–∏–π, —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ–º–µ–Ω—ã.",
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å": "–ò—Å—Ç–∏–Ω–∞, —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ, –∫–∞—Ä–º–∞, —á–µ—Å—Ç–Ω–æ—Å—Ç—å.",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π": "–û—Ç–ø—É—Å–∫–∞–Ω–∏–µ, –∂–µ—Ä—Ç–≤–∞, –Ω–æ–≤—ã–π –≤–∑–≥–ª—è–¥, –ø–∞—É–∑–∞.",
    "–°–º–µ—Ä—Ç—å": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –Ω–æ–≤—ã–π —ç—Ç–∞–ø.",
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "–ë–∞–ª–∞–Ω—Å, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –≥–∞—Ä–º–æ–Ω–∏—è.",
    "–î—å—è–≤–æ–ª": "–ò—Å–∫—É—à–µ–Ω–∏–µ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —Ç–µ–Ω—å, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä–∞—Ö–∏.",
    "–ë–∞—à–Ω—è": "–†–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–ª–ª—é–∑–∏–π, –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ.",
    "–ó–≤–µ–∑–¥–∞": "–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –¥—É—Ö–æ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, —Å–≤–µ—Ç –≤–ø–µ—Ä–µ–¥–∏.",
    "–õ—É–Ω–∞": "–ò–ª–ª—é–∑–∏–∏, —Å–Ω—ã, –Ω–µ—è—Å–Ω–æ—Å—Ç—å, –∏–Ω—Ç—É–∏—Ü–∏—è.",
    "–°–æ–ª–Ω—Ü–µ": "–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, —ç–Ω–µ—Ä–≥–∏—è, —è—Å–Ω–æ—Å—Ç—å.",
    "–°—Ç—Ä–∞—à–Ω—ã–π –°—É–¥": "–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ, –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ.",
    "–ú–∏—Ä": "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ–¥–∏–Ω–µ–Ω–∏–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏."
}

@bot.message_handler(commands=["–∫–∞—Ä—Ç–∞"])
def handle_tarot_card(message):
    card, meaning = random.choice(list(tarot_cards.items()))
    response = f"üîÆ –¢–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è: *{card}*\n\n_–ó–Ω–∞—á–µ–Ω–∏–µ_: {meaning}"
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

@bot.message_handler(content_types=["text"])
def handle_text(message):
    user_id = message.chat.id
    text = message.text.strip()

    print(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if text.lower() == "–ø–æ–º–æ—â—å":
        help_message = (
            "üßò –Ø —Ç–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫. –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å:\n"
            "‚Ä¢ '–ì–æ–≤–æ—Ä–∏ –ø–æ-—Ä—É—Å—Å–∫–∏' –∏–ª–∏ '–ì–æ–≤–æ—Ä–∏ –ø–æ-–Ω–µ–º–µ—Ü–∫–∏'\n"
            "‚Ä¢ /–∫–∞—Ä—Ç–∞ ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è –¢–∞—Ä–æ\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —è –∑–∞–ø–æ–º–∏–Ω–∞—é —Å—É—Ç—å –∏ –æ—Ç–≤–µ—á–∞—é –≥–æ–ª–æ—Å–æ–º"
        )
        bot.send_message(user_id, help_message)
        return

    if text.lower() == "–≥–æ–≤–æ—Ä–∏ –ø–æ-–Ω–µ–º–µ—Ü–∫–∏":
        user_languages[user_id] = {"lang": "de-DE", "voice": "de-DE-Wavenet-D"}
        bot.send_message(user_id, "Okay! Ich spreche jetzt Deutsch üá©üá™")
        return
    elif text.lower() == "–≥–æ–≤–æ—Ä–∏ –ø–æ-—Ä—É—Å—Å–∫–∏":
        user_languages[user_id] = {"lang": "ru-RU", "voice": "ru-RU-Wavenet-D"}
        bot.send_message(user_id, "–•–æ—Ä–æ—à–æ, —è —Å–Ω–æ–≤–∞ –≥–æ–≤–æ—Ä—é –ø–æ-—Ä—É—Å—Å–∫–∏ üá∑üá∫")
        return

    lang_config = user_languages.get(user_id, {"lang": "ru-RU", "voice": "ru-RU-Wavenet-D"})
    reply = generate_gpt_reply(user_id, text)
    print(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç GPT: {reply}")
    bot.send_message(user_id, reply)

    voice_file = text_to_speech(reply, lang=lang_config["lang"], voice_name=lang_config["voice"])
    if voice_file:
        with open(voice_file, "rb") as f:
            bot.send_voice(user_id, f)

def transcribe_audio(file_path):
    recognizer = sr.Recognizer()
    with sr.AudioFile(file_path) as source:
        audio = recognizer.record(source)
    return recognizer.recognize_google(audio, language="ru-RU")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    user_id = message.chat.id
    lang_config = user_languages.get(user_id, {"lang": "ru-RU", "voice": "ru-RU-Wavenet-D"})

    if user_id not in user_histories:
        user_histories[user_id] = [{"role": "system", "content": "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥."}]

    try:
        print("üéôÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        ogg_path = "voice.ogg"
        wav_path = "voice.wav"

        with open(ogg_path, "wb") as f:
            f.write(downloaded_file)

        AudioSegment.from_ogg(ogg_path).export(wav_path, format="wav")
        recognized_text = transcribe_audio(wav_path)
        print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text}")

        reply = generate_gpt_reply(user_id, recognized_text)
        bot.send_message(message.chat.id, reply)

        voice_file = text_to_speech(reply, lang=lang_config["lang"], voice_name=lang_config["voice"])
        if voice_file:
            with open(voice_file, "rb") as f:
                bot.send_voice(message.chat.id, f)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        traceback.print_exc()
        bot.send_message(message.chat.id, "–û–π, —è –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–≤–æ–π –≥–æ–ª–æ—Å... –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑? üéôÔ∏è")

if __name__ == "__main__":
    load_histories()
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = os.path.expanduser("~/Downloads/true-oarlock-455616-s5-bcb53dd3b43a.json")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.infinity_polling()
